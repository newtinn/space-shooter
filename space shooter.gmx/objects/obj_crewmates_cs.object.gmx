<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pointX = 0;
pointY = 0;
myNum = 0;

anim = 0;
gunCounter = 0;
gunShow = false;

currentFrame[0] = spr_player_0;
currentFrame[1] = spr_player_1;
currentFrame[2] = spr_player_2;
currentFrame[3] = spr_player_1;
currentFrame[4] = spr_player_0;
currentFrame[5] = spr_player_3;
currentFrame[6] = spr_player_4;
currentFrame[7] = spr_player_3;
currentFrameNum = 0;
currentFrameSpeed = 0.35;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = direction;

if (anim == 0) {
    currentFrameNum += currentFrameSpeed;
    
    if (currentFrameNum &gt; array_length_1d(currentFrame)-1) {
        currentFrameNum = 0;
    }

    sprite_index = currentFrame[floor(currentFrameNum)];
    
    speed = 2;
    direction = point_direction(x,y,pointX,pointY);
    
    if (distance_to_point(pointX,pointY) &lt; 5) {
        speed = 0;
        sprite_index = spr_player_0;
        anim = 1;
    }   
}

if (anim == 1) {
    if (instance_exists(obj_player_cs)) {
        if (obj_player_cs.anim == 2) {
            var angle = floor(point_direction(x,y,obj_player_cs.x,obj_player_cs.y));
            var diffangle = angle_difference(image_angle,angle);
            if (abs(diffangle) &gt; 5) {
                direction -= min(abs(diffangle), 5) * sign(diffangle);   
            } else {
                direction = point_direction(x,y,obj_player_cs.x,obj_player_cs.y);
            
                if (gunCounter &lt; 30) {
                    gunCounter += 1;
                } else {
                    gunShow = true;
                }
            }
        }
    } else {
        anim = 2;
    }
}

if (anim == 2) {
    var angle = floor(point_direction(x,y,pointX+300,pointY));
    var diffangle = angle_difference(image_angle,angle);
    if (abs(diffangle) &gt; 5) {
        direction -= min(abs(diffangle), 5) * sign(diffangle);   
    } else {
        direction = point_direction(x,y,pointX+300,pointY);
        currentFrameNum += currentFrameSpeed;
    
        if (currentFrameNum &gt; array_length_1d(currentFrame)-1) {
            currentFrameNum = 0;
        }
    
        sprite_index = currentFrame[floor(currentFrameNum)];
        
        speed = 2;
    }
}

if (gunShow == true) &amp;&amp; (myNum == 1) {
    obj_gun_cs.x = x+ lengthdir_x(8, image_angle);
    obj_gun_cs.y = (y+lengthdir_y(8, image_angle))-6;
    obj_gun_cs.visible = true;
    obj_gun_cs.image_angle = image_angle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self_3d();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_main);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
