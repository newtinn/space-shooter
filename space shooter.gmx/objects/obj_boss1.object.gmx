<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables

// creating collision mask
instance_create(x,y,obj_boss1_col);

turn = false;
timerAttack = 60;

angle=0;
anglePicking = false;
stuckWall = false;
stuckWallNew = false;
thisSide = "";

direction = point_direction(x,y,room_width/2,room_height/2);

randomize();

hit = false;
hitCountdown = 0;

// health
global.boss1health = 100;

if (global.boss[0] == true) {
    global.boss1health = 0;
    global.bossDone[0] += 1;
}

alarm[1] = timerAttack*3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// stopping the boss
if (global.boss1health &gt; 0) &amp;&amp; (instance_exists(obj_player)) {
    speed = 0;
    stuckWall = false;
    stuckDirection = "";
    anglePicking = false;
    alarm[0] = timerAttack;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// moving this boss
if (global.boss1health &gt; 0) {
    stuckWall = false;
    turn = false;
    speed = 8;
    
    trail = instance_create(x,y,obj_trail);
    trail.sprite_index = spr_boss1_trail;
    trail.image_angle = image_angle;
    trail.timer = 10;
    anglePicking = false;
    
    alarm[2] = timerAttack/2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// call to turn towards player
if (global.boss1health &gt; 0) &amp;&amp; (instance_exists(obj_player)) {
    stuckWallNew = false;
    turnProcess = false;
    turn = true;
    alarm[1] = timerAttack;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step event

if (global.paused == false) {
    scr_boss1_turn();
}
if (global.paused == true) {
    speed = 0;
}

image_angle = direction;

// checking if hit
if (global.boss1health &gt; 0) {
    if (hit == true) {
        hitCountdown += 1;
        
        if (hitCountdown &gt;= 10) {
            hitCountdown = 0;
            hit = false;
        }
    }
} else {
    hit = false;
}

if (global.boss1health &lt;= 0) {
    obj_door.bossExists = false;
    obj_door.wayAnimation = "backwards";
    obj_door.image_index = 0;

    // creating death animation
    anim = instance_create(x,y,obj_boss1_death);
    anim.image_angle = image_angle;
    anim.depth = depth;
    global.boss[0] = true;
    global.bossDone[0] += 1;
    
    if (global.bossDone[0] &gt; 1) {
        anim.currentFrameNum = 3;
    }
    
    instance_destroy();
} else {
    obj_door.bossExists = true;
    wayAnimation = "forward";
}

if (x &gt; 192) &amp;&amp; (x &lt; room_width-192) {
    if (y &lt; 192) {
        thisSide = "top";
    }
    if (y &gt; room_height-192) {
        thisSide = "bottom";
    }
}
if (x &lt; 192) {
    if (y &gt; 192) &amp;&amp; (y &lt; room_height-192) {
        thisSide = "left";
    }
}
if (x &gt; room_width-192) {
    if (y &gt; 192) &amp;&amp; (y &lt; room_height-192) {
        thisSide = "right";
    }
}
// checking if outside region
if (x &gt; 192) &amp;&amp; (x &lt; room_width-192) {
    if (y &gt; 192) &amp;&amp; (y &lt; room_height-192) {
        thisSide = "";
    }
}

/*if (instance_exists(obj_player)) {
    show_debug_message("BOSS: "+thisSide+" , PLAYER: "+obj_player.thisSide);
}*/

if (instance_exists(obj_fade)) {
    depth = 100;
} else {
    depth = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self_3d();

if (hit == true) {
    for (var _i=0; _i&lt;image_number; _i++) {
        draw_sprite_ext(sprite_index, _i, x, y-_i, image_xscale, image_yscale, image_angle, c_red, image_alpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
